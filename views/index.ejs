<!DOCTYPE html>
<html>
<head>
    <title> <%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <script src="/javascripts/blockly_compressed.js"></script>
    <script src="/javascripts/python_compressed.js"></script>
	<script src="/javascripts/javascript_compressed.js"></script>
    <script src="/javascripts/blocks_compressed.js"></script>
    <script src="/javascripts/msg/js/fr.js"></script>
    
</head>
<body>
<p> <%= userID %> </p>
<select id="exerciselist" onchange="changeExercise(this)"></select>
<div id="main">
    <div id="blocklyDiv"></div>
    <textarea id="pythonArea" disabled></textarea>
</div>

<button onclick="startDownload()"> click me</button>
<xml xmlns="http://www.w3.org/1999/xhtml" id="toolbox" style="display: none;">
    <category name="Logic" colour="#5C81A6">
		<block type="logic_boolean"></block>
        <block type="controls_if"></block>
		<block type="controls_ifelse"></block>
		<block type="logic_negate"></block>
        <block type="logic_compare">
            <field name="OP">EQ</field>
        </block>
        <block type="logic_operation">
            <field name="OP">AND</field>
        </block>
    </category>
    <category name="Loops" colour="#5CA65C">
        <block type="controls_repeat_ext">
            <value name="TIMES">
            </value>
        </block>
        <block type="controls_while"></block>
        <block type="controls_for">
            <field name="VAR" id="PO(Nz1Dp]zeuWcA_A8Ch" variabletype="">i</field>
            <value name="FROM">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
            <value name="TO">
                <shadow type="math_number">
                    <field name="NUM">10</field>
                </shadow>
            </value>
            <value name="BY">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
        </block>
        <block type="controls_flow_statements">
            <field name="FLOW">BREAK</field>
        </block>
    </category>
    <category name="Math" colour="#5C68A6">
        <block type="math_number">
            <field name="NUM">0</field>
        </block>
        <block type="math_arithmetic">
            <field name="OP">ADD</field>
            <value name="A">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
            <value name="B">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
        </block>
        <block type="math_single">
            <field name="OP">ROOT</field>
            <value name="NUM">
                <shadow type="math_number">
                    <field name="NUM">9</field>
                </shadow>
            </value>
        </block>
        <block type="math_trig">
            <field name="OP">SIN</field>
            <value name="NUM">
                <shadow type="math_number">
                    <field name="NUM">45</field>
                </shadow>
            </value>
        </block>
        <block type="math_constant">
            <field name="CONSTANT">PI</field>
        </block>
        <block type="math_number_property">
            <mutation divisor_input="false"></mutation>
            <field name="PROPERTY">EVEN</field>
            <value name="NUMBER_TO_CHECK">
                <shadow type="math_number">
                    <field name="NUM">0</field>
                </shadow>
            </value>
        </block>
        <block type="math_number">
            <field name="NUM">0</field>
        </block>
        <block type="math_on_list">
            <mutation op="SUM"></mutation>
            <field name="OP">SUM</field>
        </block>
        <block type="math_modulo">
            <value name="DIVIDEND">
                <shadow type="math_number">
                    <field name="NUM">64</field>
                </shadow>
            </value>
            <value name="DIVISOR">
                <shadow type="math_number">
                    <field name="NUM">10</field>
                </shadow>
            </value>
        </block>
        <block type="math_constrain">
            <value name="VALUE">
                <shadow type="math_number">
                    <field name="NUM">50</field>
                </shadow>
            </value>
            <value name="LOW">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
            <value name="HIGH">
                <shadow type="math_number">
                    <field name="NUM">100</field>
                </shadow>
            </value>
        </block>
        <block type="math_random_int">
            <value name="FROM">
                <shadow type="math_number">
                    <field name="NUM">1</field>
                </shadow>
            </value>
            <value name="TO">
                <shadow type="math_number">
                    <field name="NUM">100</field>
                </shadow>
            </value>
        </block>
        <block type="math_random_float"></block>
    </category>
    <sep></sep>
    <category name="Variables" colour="#A65C81" custom="VARIABLE"></category>
    <category name="Basic" colour="#6d5ba5">
        <block type="show_number">
            <field name="VALUE">0</field>
        </block>
        <block type="show_leds">
            <field name="LED1_1">FALSE</field>
            <field name="LED1_2">FALSE</field>
            <field name="LED1_3">FALSE</field>
            <field name="LED1_4">FALSE</field>
            <field name="LED1_5">FALSE</field>
            <field name="LED2_1">FALSE</field>
            <field name="LED2_2">FALSE</field>
            <field name="LED2_3">FALSE</field>
            <field name="LED2_4">FALSE</field>
            <field name="LED2_5">FALSE</field>
            <field name="LED3_1">FALSE</field>
            <field name="LED3_2">FALSE</field>
            <field name="LED3_3">FALSE</field>
            <field name="LED3_4">FALSE</field>
            <field name="LED3_5">FALSE</field>
            <field name="LED4_1">FALSE</field>
            <field name="LED4_2">FALSE</field>
            <field name="LED4_3">FALSE</field>
            <field name="LED4_4">FALSE</field>
            <field name="LED4_5">FALSE</field>
            <field name="LED5_1">FALSE</field>
            <field name="LED5_2">FALSE</field>
            <field name="LED5_3">FALSE</field>
            <field name="LED5_4">FALSE</field>
            <field name="LED5_5">FALSE</field>
        </block>
        <block type="show_string">
            <field name="VALUE">default</field>
        </block>
        <block type="pause">
            <field name="VALUE">100</field>
        </block>
        <block type="show_icon" colour="#6d5ba5">
            <field name="ICON">HEART</field>
        </block>
    </category>
</xml>


<script>
	var workspace = Blockly.inject('blocklyDiv', {
		toolbox: document.getElementById('toolbox')
	});
	
	var blockEvent = 0; // used to prevent the logging when changing workspace from javascript
	var currentGroup = null;
	var hexFileHeader = <%- hexFileHeader %>;
	console.log(hexFileHeader);
	
	workspace.addChangeListener(mirrorEvent);
	loadXmlToWorkspace(<%- workspacexml %>);
	loadExerciseList( <%- exerciselist %>);
	
	// Load the exercise from an array and put it in the selector
	function loadExerciseList(exerciselist){ 
		var exerciseSelector = document.querySelector("#exerciselist");
		for(var i=0;i<exerciselist.length;i++){
			var option = document.createElement('option');
			option.value = exerciselist[i]["exerciseid"];
			option.text =  exerciselist[i]["title"];
			exerciseSelector.appendChild(option);
		}
	
	}
	
	// Load the workspace from xml code
	function loadXmlToWorkspace(wholexml){
		if (wholexml == null)
			return;
		blockEvent +=1;
		Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(wholexml),workspace);
	}
	
	// Send an xmlhttprequest to the server when the exercise is changed
	function changeExercise(obj){
		console.log(obj[obj.selectedIndex].value);
		var test = JSON.stringify({currentExerciseID:obj[obj.selectedIndex].value});
		blockEvent+=1;
		workspace.clear();
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
			   // Typical action to be performed when the document is ready:
			   console.log(xhttp.responseText);
			   loadXmlToWorkspace(xhttp.responseText);
			}
		};
		var url = "http://localhost:3000/pageChange/?currentExerciseId="+ obj[obj.selectedIndex].value;
		xhttp.open("GET",url, true);
		xhttp.send();
	}

	// Called for each event on block, and sent to the server to be logged
	function mirrorEvent(primaryEvent) {
	    var pythonArea = document.getElementById('pythonArea');
		pythonArea.value = Blockly.Python.workspaceToCode(workspace);
		var exerciselist = document.querySelector('#exerciselist');
		//console.log(pythonArea.value);
		var code= pythonArea.value;
		//document.getElementById('hiddenPythonCode').value = Blockly.Python.workspaceToCode(workspace);
		//document.getElementById('hiddenWorkspace').value = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
		console.log(primaryEvent);
		if (primaryEvent.type == Blockly.Events.UI) {
		   return;  // Don't mirror UI events.
		}
		if (primaryEvent.group == currentGroup)
			return;
		if (blockEvent != 0)
		{
			currentGroup = primaryEvent.group;
			blockEvent-=1;
			return;
		}
		currentGroup = null;
		// Convert event to JSON.  This could then be transmitted across the net.
		var json1 = primaryEvent.toJson();
		var timeStamp = Math.floor(Date.now() / 1000);
		if (json1.type == 'create') // inutile??
		{
			var spl = eval(json1);
			spl = spl.xml;

			spl = spl.split('type');
			spl = spl[1];
			spl = spl.split('"');
			var block= spl[1];
			json1.block= block;
		}

		// Convert JSON back into an event, then execute it.
		json1.pycode=code;
		json1.time= new Date().toISOString().slice(0, 19).replace('T', ' ');
		json1.workspacexml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
		json1.currentExercise = exerciselist[exerciselist.selectedIndex].value;
		if (json1.xml)
		{
			json1.xml = json1.xml.replace(' xmlns="http://www.w3.org/1999/xhtml"','');
		}
		console.log(json1);
		console.log(typeof json1);
		var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance
		var url = "http://localhost:3000/blocklogging";
		xmlhttp.open("POST", url,true);
		xmlhttp.setRequestHeader("Content-Type", "application/json");
		xmlhttp.send(JSON.stringify(json1));
	}
	
	const download = function(data){
		const blob = new Blob([data],{type:'application/octer-stream'});
		const url = window.URL.createObjectURL(blob);
		const a= document.createElement('a');
		a.setAttribute('hidden','');
		a.setAttribute('href',url);
		a.setAttribute('download','download.hex');
		a.click();
	};
	
	const startDownload = async function(){
		
		const data = hexFileHeader + '\\n' + JSON.stringify("test");
		download(data);
	};
	
	
	
	/* // ALL the following code is for the simulation - May not be used
	var led = [];
	//showNumber();
	function showNumber(){
		if (!led[0])
		{
			setTimeout(showNumber,5000);
			console.log(null);
			return null;
		}
		if (led[0][0].length == 5)
		{		
			var temp = led[0];
			led.shift();
			console.log(temp);
			setTimeout(showNumber,5000);
			return temp;
		}
		var temp = [];
		for (var i=0;i<5;i++)
		{
			temp.push(led[0][i].slice(0,5));
			led[0][i].shift();		
		}
		console.log(temp);
		setTimeout(showNumber,1000);
		return temp;
	}
	
	function addNumber(i){
		led.push(intToArray(i));
	}
	var intToLed=[[[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]], //0
			  [[0,0,1,0,0],[0,1,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,1,1,0]], //1
			  [[1,1,1,0,0],[0,0,0,1,0],[0,1,1,0,0],[1,0,0,0,0],[1,1,1,1,0]], //2
			  [[1,1,1,1,0],[0,0,0,1,0],[0,0,1,0,0],[1,0,0,1,0],[0,1,1,0,0]], //3
			  [[0,0,1,1,0],[0,1,0,1,0],[1,0,0,1,0],[1,1,1,1,1],[0,0,0,1,0]], //4
			  [[1,1,1,1,1],[1,0,0,0,0],[1,1,1,1,0],[0,0,0,0,1],[1,1,1,1,0]], //5
			  [[0,0,0,1,0],[0,0,1,0,0],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]], //6
			  [[1,1,1,1,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]], //7
			  [[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]], //8
			  [[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[0,0,1,0,0],[0,1,0,0,0]]]; //9

	function intToArray(val){
		var temp;
		var array =[[],[],[],[],[]];
		for (var i=0;i<val.toString().length;i++){
			temp = parseInt(val.toString().charAt(i));
			for (var j=0;j<5;j++){
				array[j] = array[j].concat(intToLed[temp][j]);
			}
		}
		return array;
	}
	*/
</script>
</body>
</html>
